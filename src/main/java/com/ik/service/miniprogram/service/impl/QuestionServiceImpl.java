package com.ik.service.miniprogram.service.impl;

import java.util.Date;
import java.util.List;

import org.mybatis.extend.generic.service.impl.GenericServiceImpl;
import org.mybatis.extend.page.param.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ik.service.miniprogram.mapper.QuestionMapper;
import com.ik.service.miniprogram.model.Question;
import com.ik.service.miniprogram.service.QuestionService;
import com.ik.service.miniprogram.service.TeacherService;

/**
 * ServiceImpl: QuestionServiceImpl
 * Mapper : QuestionMapper
 * Model  : Question
 *
 * This ServiceImpl generated by MyBatis Generator Extend at 2018-12-04 10:26:51
 */
@Service
@Transactional
public class QuestionServiceImpl extends GenericServiceImpl<Question, Integer, QuestionMapper>
        implements QuestionService {
    @Autowired
    private QuestionMapper questionMapper;
    @Autowired
    private TeacherService teacherService;

    @Override
    public QuestionMapper getGenericMapper() {
        return questionMapper;
    }

    @Override
    public Question save(Integer courseType, Integer questionType, String stem, String questionChoice, String answer,
            Integer teacherId, Float point, String questionImage, String questionAudio, String questionVideo,
            String quesitonExplain) {
        Question question = new Question();
        question.setCourseType(courseType);
        question.setQuestionType(questionType);
        question.setQuestionStem(stem);
        question.setQuestionChoice(questionChoice);
        question.setQuestionImage(questionImage);
        question.setQuestionAudio(questionAudio);
        question.setQuestionVideo(questionVideo);
        question.setQuestionAnswer(answer);
        question.setTeacherId(teacherId);
        question.setPoint(point);
        question.setQuestionExplain(quesitonExplain);
        question.setCreatedAt(new Date());
        question.setUpdatedAt(new Date());
        questionMapper.insertSelective(question);
        return question;
    }


    @Override
    public Question update(Question question, String stem, String questionChoice, String answer, Float point,
            String questionImage, String questionAudio, String questionVideo) {
        question.setQuestionStem(stem);
        question.setQuestionChoice(questionChoice);
        question.setQuestionAnswer(answer);
        question.setPoint(point);
        question.setQuestionChoice(questionChoice);
        question.setQuestionImage(questionImage);
        question.setQuestionAudio(questionAudio);
        question.setQuestionVideo(questionVideo);
        question.setUpdatedAt(new Date());
        questionMapper.updateByPrimaryKeySelective(question);
        return question;
    }

    @Override
    public List<Question> getByIds(List<Integer> questionIds) {
        List<Question> questionList = questionMapper.getByIds(questionIds);
        return questionList;
    }

    @Override
    public List<Question> getByTeacherId(Integer teacherId, Page page) {

        return questionMapper.getByTeacherId(teacherId, page);
    }
}