package com.ik.service.miniprogram.service.impl;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.mybatis.extend.generic.service.impl.GenericServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import com.ik.crm.commons.util.StringUtils;
import com.ik.service.miniprogram.mapper.TeacherStudentMapMapper;
import com.ik.service.miniprogram.model.Student;
import com.ik.service.miniprogram.model.TeacherStudentMap;
import com.ik.service.miniprogram.service.StudentService;
import com.ik.service.miniprogram.service.TeacherStudentMapService;

/**
 * ServiceImpl: TeacherStudentMapServiceImpl
 * Mapper : TeacherStudentMapMapper
 * Model  : TeacherStudentMap
 *
 * This ServiceImpl generated by MyBatis Generator Extend at 2018-12-04 10:26:51
 */
@Service
@Transactional
public class TeacherStudentMapServiceImpl extends
        GenericServiceImpl<TeacherStudentMap, Integer, TeacherStudentMapMapper> implements TeacherStudentMapService {
    private static Logger logger = LoggerFactory.getLogger(TeacherStudentMapServiceImpl.class);
    @Autowired
    private TeacherStudentMapMapper teacherStudentMapMapper;
    @Autowired
    private StudentService studentService;

    @Override
    public TeacherStudentMapMapper getGenericMapper() {
        return teacherStudentMapMapper;
    }

    @Override
    public void saveStudentTeacherMap(Integer studentId, List<Integer> teacherIds) {
        teacherIds.stream().forEach(teacherId -> {
            TeacherStudentMap teacherStudentMap = new TeacherStudentMap();
            teacherStudentMap.setStudentId(studentId);
            teacherStudentMap.setTeacherId(teacherId);
            teacherStudentMap = Optional.ofNullable(teacherStudentMapMapper.selectOne(teacherStudentMap))
                    .orElse(teacherStudentMap);

            if (teacherStudentMap.getId() == null) {
                teacherStudentMap.setAuditStatus(false);
                teacherStudentMap.setCreatedAt(new Date());
                teacherStudentMap.setUpdatedAt(new Date());
                teacherStudentMapMapper.insertSelective(teacherStudentMap);
            }
        });

    }

    @Override
    public void updateStudentBindedTeachers(Integer studentId) {
        Student student = studentService.selectByPrimaryKey(studentId);
        TeacherStudentMap teacherStudentMap = new TeacherStudentMap();
        teacherStudentMap.setStudentId(studentId);
        List<TeacherStudentMap> teacherStudentMapList = teacherStudentMapMapper.select(teacherStudentMap);

        List<Integer> teacherIds = teacherStudentMapList.stream().map(TeacherStudentMap::getTeacherId)
                .collect(Collectors.toList());
        if (!CollectionUtils.isEmpty(teacherIds)) {
            Integer[] teacherIdsArray = teacherIds.toArray(new Integer[teacherIds.size()]);
            student.setBindedTeacherids(StringUtils.join(teacherIdsArray, ","));
            studentService.updateByPrimaryKeySelective(student);
        }
    }

}
