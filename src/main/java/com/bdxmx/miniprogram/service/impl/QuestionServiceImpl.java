package com.bdxmx.miniprogram.service.impl;

import java.util.List;

import org.mybatis.extend.generic.service.impl.GenericServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bdxmx.miniprogram.mapper.QuestionMapper;
import com.bdxmx.miniprogram.model.Question;
import com.bdxmx.miniprogram.model.Teacher;
import com.bdxmx.miniprogram.service.QuestionService;
import com.bdxmx.miniprogram.service.TeacherService;

/**
 * ServiceImpl: QuestionServiceImpl
 * Mapper : QuestionMapper
 * Model  : Question
 *
 * This ServiceImpl generated by MyBatis Generator Extend at 2018-12-04 10:26:51
 */
@Service
@Transactional
public class QuestionServiceImpl extends GenericServiceImpl<Question, Integer, QuestionMapper>
        implements QuestionService {
    @Autowired
    private QuestionMapper questionMapper;
    @Autowired
    private TeacherService teacherService;

    @Override
    public QuestionMapper getGenericMapper() {
        return questionMapper;
    }

    @Override
    public Question save(Integer courseType, Integer questionType, String stem, String answer, Integer accountId,
            Float point) {
        Question question = new Question();
        question.setCourseType(courseType);
        question.setQuestionType(questionType);
        question.setQuestionStem(stem);
        question.setQuestionAnswer(answer);

        Teacher teacher = new Teacher();
        teacher.setAccountId(accountId);
        teacher = teacherService.selectOne(teacher);
        question.setTeacherId(teacher.getId());
        question.setPoint(point);
        questionMapper.insertSelective(question);
        return question;
    }


    @Override
    public Question update(Integer questionId, String stem, String answer, Float point) {
        Question question = new Question();
        question.setId(questionId);
        question = questionMapper.selectOne(question);
        question.setQuestionStem(stem);
        question.setQuestionAnswer(answer);
        question.setPoint(point);

        questionMapper.updateByPrimaryKeySelective(question);
        return question;
    }

    @Override
    public List<Question> getByIds(List<Integer> questionIds) {
        return questionMapper.getByIds(questionIds);
    }

    @Override
    public List<Question> getByTeacherId(Integer teacherId) {
        Question question = new Question();
        question.setTeacherId(teacherId);

        return questionMapper.select(question);
    }
}