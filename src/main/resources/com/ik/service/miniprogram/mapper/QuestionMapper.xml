<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ik.service.miniprogram.mapper.QuestionMapper" >
    <!--
        This Mapper File generated by MyBatis Generator Extend, Please do not modify it.
    -->
    
    <resultMap id="BaseResultMap" type="com.ik.service.miniprogram.model.Question" >
        <id column="qu_id" property="id" jdbcType="INTEGER" />
        <result column="qu_teacher_id" property="teacherId" jdbcType="INTEGER" />
        <result column="qu_point" property="point" jdbcType="REAL" />
        <result column="qu_course_type" property="courseType" jdbcType="INTEGER" />
        <result column="qu_question_type" property="questionType" jdbcType="INTEGER" />
        <result column="qu_created_at" property="createdAt" jdbcType="TIMESTAMP" />
        <result column="qu_updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    </resultMap>
    
    <resultMap id="ResultMapWithBLOBs" type="com.ik.service.miniprogram.model.Question" extends="BaseResultMap" >
        <result column="qu_question_stem" property="questionStem" jdbcType="LONGVARCHAR" />
        <result column="qu_question_choice" property="questionChoice" jdbcType="LONGVARCHAR" />
        <result column="qu_question_answer" property="questionAnswer" jdbcType="LONGVARCHAR" />
    </resultMap>
    
    <sql id="Base_Column_List" >
        qu.id as qu_id, qu.teacher_id as qu_teacher_id, qu.point as qu_point, qu.course_type as qu_course_type, 
        qu.question_type as qu_question_type, qu.created_at as qu_created_at, qu.updated_at as qu_updated_at
    </sql>
    
    <sql id="Blob_Column_List" >
        qu.question_stem as qu_question_stem, qu.question_choice as qu_question_choice, qu.question_answer as qu_question_answer
    </sql>
    
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
        from questions qu
        where qu.id = #{id,jdbcType=INTEGER}
    </select>
    
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from questions
        where id = #{id,jdbcType=INTEGER}
    </delete>
    
    <insert id="insert" parameterType="com.ik.service.miniprogram.model.Question" useGeneratedKeys="true" keyProperty="id" >
        insert into questions (teacher_id, point, course_type, 
          question_type, created_at, updated_at, 
          question_stem, question_choice, question_answer
          )
        values (#{teacherId,jdbcType=INTEGER}, #{point,jdbcType=REAL}, #{courseType,jdbcType=INTEGER}, 
          #{questionType,jdbcType=INTEGER}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, 
          #{questionStem,jdbcType=LONGVARCHAR}, #{questionChoice,jdbcType=LONGVARCHAR}, #{questionAnswer,jdbcType=LONGVARCHAR}
          )
    </insert>
    
    <insert id="insertSelective" parameterType="com.ik.service.miniprogram.model.Question" useGeneratedKeys="true" keyProperty="id" >
        insert into questions
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="teacherId != null" >
                teacher_id,
            </if>
            <if test="point != null" >
                point,
            </if>
            <if test="courseType != null" >
                course_type,
            </if>
            <if test="questionType != null" >
                question_type,
            </if>
            <if test="createdAt != null" >
                created_at,
            </if>
            <if test="updatedAt != null" >
                updated_at,
            </if>
            <if test="questionStem != null" >
                question_stem,
            </if>
            <if test="questionChoice != null" >
                question_choice,
            </if>
            <if test="questionAnswer != null" >
                question_answer,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="teacherId != null" >
                #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="point != null" >
                #{point,jdbcType=REAL},
            </if>
            <if test="courseType != null" >
                #{courseType,jdbcType=INTEGER},
            </if>
            <if test="questionType != null" >
                #{questionType,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null" >
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="questionStem != null" >
                #{questionStem,jdbcType=LONGVARCHAR},
            </if>
            <if test="questionChoice != null" >
                #{questionChoice,jdbcType=LONGVARCHAR},
            </if>
            <if test="questionAnswer != null" >
                #{questionAnswer,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    
    <update id="updateByPrimaryKeySelective" parameterType="com.ik.service.miniprogram.model.Question" >
        update questions
        <set >
            <if test="teacherId != null" >
                teacher_id = #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="point != null" >
                point = #{point,jdbcType=REAL},
            </if>
            <if test="courseType != null" >
                course_type = #{courseType,jdbcType=INTEGER},
            </if>
            <if test="questionType != null" >
                question_type = #{questionType,jdbcType=INTEGER},
            </if>
            <if test="createdAt != null" >
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
            <if test="questionStem != null" >
                question_stem = #{questionStem,jdbcType=LONGVARCHAR},
            </if>
            <if test="questionChoice != null" >
                question_choice = #{questionChoice,jdbcType=LONGVARCHAR},
            </if>
            <if test="questionAnswer != null" >
                question_answer = #{questionAnswer,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <update id="updateByPrimaryKey" parameterType="com.ik.service.miniprogram.model.Question" >
        update questions
        set teacher_id = #{teacherId,jdbcType=INTEGER},
          point = #{point,jdbcType=REAL},
          course_type = #{courseType,jdbcType=INTEGER},
          question_type = #{questionType,jdbcType=INTEGER},
          created_at = #{createdAt,jdbcType=TIMESTAMP},
          updated_at = #{updatedAt,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <sql id="model_where_clause" >
        <where >
            <if test="model != null" >
                <if test="model.id != null" >
                    and qu.id = #{model.id}
                </if>
                <if test="model.teacherId != null" >
                    and qu.teacher_id = #{model.teacherId}
                </if>
                <if test="model.point != null" >
                    and qu.point = #{model.point}
                </if>
                <if test="model.courseType != null" >
                    and qu.course_type = #{model.courseType}
                </if>
                <if test="model.questionType != null" >
                    and qu.question_type = #{model.questionType}
                </if>
                <if test="model.createdAt != null" >
                    and qu.created_at = #{model.createdAt}
                </if>
                <if test="model.updatedAt != null" >
                    and qu.updated_at = #{model.updatedAt}
                </if>
                <if test="model.questionStem != null" >
                    and qu.question_stem = #{model.questionStem}
                </if>
                <if test="model.questionChoice != null" >
                    and qu.question_choice = #{model.questionChoice}
                </if>
                <if test="model.questionAnswer != null" >
                    and qu.question_answer = #{model.questionAnswer}
                </if>
            </if>
        </where>
    </sql>
    
    <select id="select" resultMap="ResultMapWithBLOBs" parameterType="com.ik.service.miniprogram.model.Question" >
        select
        <include refid="Base_Column_List" />, <include refid="Blob_Column_List" />
        from questions qu
        <include refid="model_where_clause"/>
        <if test="model == null" >
            where 0 = 1
        </if>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectOne" resultMap="ResultMapWithBLOBs" parameterType="com.ik.service.miniprogram.model.Question" >
        select
        <include refid="Base_Column_List" />, <include refid="Blob_Column_List" />
        from questions qu
        <include refid="model_where_clause"/>
        limit 1
    </select>
    
    <select id="selectPageList" resultMap="ResultMapWithBLOBs" parameterType="com.ik.service.miniprogram.model.Question" >
        select
        <include refid="Base_Column_List" />, <include refid="Blob_Column_List" />
        from questions qu
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectCount" parameterType="com.ik.service.miniprogram.model.Question" resultType="java.lang.Integer" >
        select count(1) from questions qu
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id" >
        insert into questions (
            teacher_id, point, course_type, 
            question_type, created_at, updated_at, 
            question_stem, question_choice, question_answer
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.teacherId}, #{item.point}, #{item.courseType}, 
            #{item.questionType}, #{item.createdAt}, #{item.updatedAt}, 
            #{item.questionStem}, #{item.questionChoice}, #{item.questionAnswer}
        )
        </foreach>
    </insert>
    
    <delete id="deleteByIds" parameterType="java.util.List" >
        delete from questions
        where id in
        <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>
    
</mapper>