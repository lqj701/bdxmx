<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ik.service.miniprogram.mapper.EnrollInfoMapper" >
    <!--
        This Mapper File generated by MyBatis Generator Extend, Please do not modify it.
    -->
    
    <resultMap id="BaseResultMap" type="com.ik.service.miniprogram.model.EnrollInfo" >
        <id column="ei_id" property="id" jdbcType="INTEGER" />
        <result column="ei_phone" property="phone" jdbcType="VARCHAR" />
        <result column="ei_name" property="name" jdbcType="VARCHAR" />
        <result column="ei_grade" property="grade" jdbcType="INTEGER" />
        <result column="ei_email" property="email" jdbcType="VARCHAR" />
        <result column="ei_address" property="address" jdbcType="VARCHAR" />
        <result column="ei_is_contacted" property="isContacted" jdbcType="BIT" />
        <result column="ei_created_at" property="createdAt" jdbcType="TIMESTAMP" />
        <result column="ei_updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    </resultMap>
    
    <sql id="Base_Column_List" >
        ei.id as ei_id, ei.phone as ei_phone, ei.name as ei_name, ei.grade as ei_grade, ei.email as ei_email, 
        ei.address as ei_address, ei.is_contacted as ei_is_contacted, ei.created_at as ei_created_at, 
        ei.updated_at as ei_updated_at
    </sql>
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from enroll_info ei
        where ei.id = #{id,jdbcType=INTEGER}
    </select>
    
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from enroll_info
        where id = #{id,jdbcType=INTEGER}
    </delete>
    
    <insert id="insert" parameterType="com.ik.service.miniprogram.model.EnrollInfo" useGeneratedKeys="true" keyProperty="id" >
        insert into enroll_info (phone, name, grade, 
          email, address, is_contacted, 
          created_at, updated_at)
        values (#{phone,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{grade,jdbcType=INTEGER}, 
          #{email,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{isContacted,jdbcType=BIT}, 
          #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
    </insert>
    
    <insert id="insertSelective" parameterType="com.ik.service.miniprogram.model.EnrollInfo" useGeneratedKeys="true" keyProperty="id" >
        insert into enroll_info
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="phone != null" >
                phone,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="grade != null" >
                grade,
            </if>
            <if test="email != null" >
                email,
            </if>
            <if test="address != null" >
                address,
            </if>
            <if test="isContacted != null" >
                is_contacted,
            </if>
            <if test="createdAt != null" >
                created_at,
            </if>
            <if test="updatedAt != null" >
                updated_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="phone != null" >
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="grade != null" >
                #{grade,jdbcType=INTEGER},
            </if>
            <if test="email != null" >
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="address != null" >
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="isContacted != null" >
                #{isContacted,jdbcType=BIT},
            </if>
            <if test="createdAt != null" >
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    
    <update id="updateByPrimaryKeySelective" parameterType="com.ik.service.miniprogram.model.EnrollInfo" >
        update enroll_info
        <set >
            <if test="phone != null" >
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="grade != null" >
                grade = #{grade,jdbcType=INTEGER},
            </if>
            <if test="email != null" >
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="address != null" >
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="isContacted != null" >
                is_contacted = #{isContacted,jdbcType=BIT},
            </if>
            <if test="createdAt != null" >
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <update id="updateByPrimaryKey" parameterType="com.ik.service.miniprogram.model.EnrollInfo" >
        update enroll_info
        set phone = #{phone,jdbcType=VARCHAR},
          name = #{name,jdbcType=VARCHAR},
          grade = #{grade,jdbcType=INTEGER},
          email = #{email,jdbcType=VARCHAR},
          address = #{address,jdbcType=VARCHAR},
          is_contacted = #{isContacted,jdbcType=BIT},
          created_at = #{createdAt,jdbcType=TIMESTAMP},
          updated_at = #{updatedAt,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <sql id="model_where_clause" >
        <where >
            <if test="model != null" >
                <if test="model.id != null" >
                    and ei.id = #{model.id}
                </if>
                <if test="model.phone != null" >
                    and ei.phone = #{model.phone}
                </if>
                <if test="model.name != null" >
                    and ei.name = #{model.name}
                </if>
                <if test="model.grade != null" >
                    and ei.grade = #{model.grade}
                </if>
                <if test="model.email != null" >
                    and ei.email = #{model.email}
                </if>
                <if test="model.address != null" >
                    and ei.address = #{model.address}
                </if>
                <if test="model.isContacted != null" >
                    and ei.is_contacted = #{model.isContacted}
                </if>
                <if test="model.createdAt != null" >
                    and ei.created_at = #{model.createdAt}
                </if>
                <if test="model.updatedAt != null" >
                    and ei.updated_at = #{model.updatedAt}
                </if>
            </if>
        </where>
    </sql>
    
    <select id="select" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.EnrollInfo" >
        select
        <include refid="Base_Column_List" />
        from enroll_info ei
        <include refid="model_where_clause"/>
        <if test="model == null" >
            where 0 = 1
        </if>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectOne" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.EnrollInfo" >
        select
        <include refid="Base_Column_List" />
        from enroll_info ei
        <include refid="model_where_clause"/>
        limit 1
    </select>
    
    <select id="selectPageList" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.EnrollInfo" >
        select
        <include refid="Base_Column_List" />
        from enroll_info ei
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectCount" parameterType="com.ik.service.miniprogram.model.EnrollInfo" resultType="java.lang.Integer" >
        select count(1) from enroll_info ei
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id" >
        insert into enroll_info (
            phone, name, grade, 
            email, address, is_contacted, 
            created_at, updated_at
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.phone}, #{item.name}, #{item.grade}, 
            #{item.email}, #{item.address}, #{item.isContacted}, 
            #{item.createdAt}, #{item.updatedAt}
        )
        </foreach>
    </insert>
    
    <delete id="deleteByIds" parameterType="java.util.List" >
        delete from enroll_info
        where id in
        <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>
    
</mapper>