<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ik.service.miniprogram.mapper.StudentMapper" >
    <!--
        This Mapper File generated by MyBatis Generator Extend, Please do not modify it.
    -->
    
    <resultMap id="BaseResultMap" type="com.ik.service.miniprogram.model.Student" >
        <id column="st_id" property="id" jdbcType="INTEGER" />
        <result column="st_grade" property="grade" jdbcType="INTEGER" />
        <result column="st_name" property="name" jdbcType="VARCHAR" />
        <result column="st_email" property="email" jdbcType="VARCHAR" />
        <result column="st_openid" property="openid" jdbcType="VARCHAR" />
        <result column="st_phone" property="phone" jdbcType="VARCHAR" />
        <result column="st_created_at" property="createdAt" jdbcType="TIMESTAMP" />
        <result column="st_updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    </resultMap>
    
    <sql id="Base_Column_List" >
        st.id as st_id, st.grade as st_grade, st.name as st_name, st.email as st_email, st.openid as st_openid, 
        st.phone as st_phone, st.created_at as st_created_at, st.updated_at as st_updated_at
    </sql>
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from students st
        where st.id = #{id,jdbcType=INTEGER}
    </select>
    
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from students
        where id = #{id,jdbcType=INTEGER}
    </delete>
    
    <insert id="insert" parameterType="com.ik.service.miniprogram.model.Student" useGeneratedKeys="true" keyProperty="id" >
        insert into students (grade, name, email, 
          openid, phone, created_at, 
          updated_at)
        values (#{grade,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
          #{openid,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, 
          #{updatedAt,jdbcType=TIMESTAMP})
    </insert>
    
    <insert id="insertSelective" parameterType="com.ik.service.miniprogram.model.Student" useGeneratedKeys="true" keyProperty="id" >
        insert into students
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="grade != null" >
                grade,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="email != null" >
                email,
            </if>
            <if test="openid != null" >
                openid,
            </if>
            <if test="phone != null" >
                phone,
            </if>
            <if test="createdAt != null" >
                created_at,
            </if>
            <if test="updatedAt != null" >
                updated_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="grade != null" >
                #{grade,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="email != null" >
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="openid != null" >
                #{openid,jdbcType=VARCHAR},
            </if>
            <if test="phone != null" >
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null" >
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    
    <update id="updateByPrimaryKeySelective" parameterType="com.ik.service.miniprogram.model.Student" >
        update students
        <set >
            <if test="grade != null" >
                grade = #{grade,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="email != null" >
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="openid != null" >
                openid = #{openid,jdbcType=VARCHAR},
            </if>
            <if test="phone != null" >
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null" >
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <update id="updateByPrimaryKey" parameterType="com.ik.service.miniprogram.model.Student" >
        update students
        set grade = #{grade,jdbcType=INTEGER},
          name = #{name,jdbcType=VARCHAR},
          email = #{email,jdbcType=VARCHAR},
          openid = #{openid,jdbcType=VARCHAR},
          phone = #{phone,jdbcType=VARCHAR},
          created_at = #{createdAt,jdbcType=TIMESTAMP},
          updated_at = #{updatedAt,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <sql id="model_where_clause" >
        <where >
            <if test="model != null" >
                <if test="model.id != null" >
                    and st.id = #{model.id}
                </if>
                <if test="model.grade != null" >
                    and st.grade = #{model.grade}
                </if>
                <if test="model.name != null" >
                    and st.name = #{model.name}
                </if>
                <if test="model.email != null" >
                    and st.email = #{model.email}
                </if>
                <if test="model.openid != null" >
                    and st.openid = #{model.openid}
                </if>
                <if test="model.phone != null" >
                    and st.phone = #{model.phone}
                </if>
                <if test="model.createdAt != null" >
                    and st.created_at = #{model.createdAt}
                </if>
                <if test="model.updatedAt != null" >
                    and st.updated_at = #{model.updatedAt}
                </if>
            </if>
        </where>
    </sql>
    
    <select id="select" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.Student" >
        select
        <include refid="Base_Column_List" />
        from students st
        <include refid="model_where_clause"/>
        <if test="model == null" >
            where 0 = 1
        </if>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectOne" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.Student" >
        select
        <include refid="Base_Column_List" />
        from students st
        <include refid="model_where_clause"/>
        limit 1
    </select>
    
    <select id="selectPageList" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.Student" >
        select
        <include refid="Base_Column_List" />
        from students st
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectCount" parameterType="com.ik.service.miniprogram.model.Student" resultType="java.lang.Integer" >
        select count(1) from students st
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id" >
        insert into students (
            grade, name, email, 
            openid, phone, created_at, 
            updated_at
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.grade}, #{item.name}, #{item.email}, 
            #{item.openid}, #{item.phone}, #{item.createdAt}, 
            #{item.updatedAt}
        )
        </foreach>
    </insert>
    
    <delete id="deleteByIds" parameterType="java.util.List" >
        delete from students
        where id in
        <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>
    
</mapper>