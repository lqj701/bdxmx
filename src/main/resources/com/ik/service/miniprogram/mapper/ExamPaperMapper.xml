<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ik.service.miniprogram.mapper.ExamPaperMapper" >
    <!--
        This Mapper File generated by MyBatis Generator Extend, Please do not modify it.
    -->
    
    <resultMap id="BaseResultMap" type="com.ik.service.miniprogram.model.ExamPaper" >
        <id column="ep_id" property="id" jdbcType="INTEGER" />
        <result column="ep_paper_type" property="paperType" jdbcType="INTEGER" />
        <result column="ep_name" property="name" jdbcType="VARCHAR" />
        <result column="ep_total_scores" property="totalScores" jdbcType="INTEGER" />
        <result column="ep_teacher_id" property="teacherId" jdbcType="INTEGER" />
        <result column="ep_set_person" property="setPerson" jdbcType="VARCHAR" />
        <result column="ep_question_ids" property="questionIds" jdbcType="VARCHAR" />
        <result column="ep_created_at" property="createdAt" jdbcType="TIMESTAMP" />
        <result column="ep_updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    </resultMap>
    
    <sql id="Base_Column_List" >
        ep.id as ep_id, ep.paper_type as ep_paper_type, ep.name as ep_name, ep.total_scores as ep_total_scores, 
        ep.teacher_id as ep_teacher_id, ep.set_person as ep_set_person, ep.question_ids as ep_question_ids, 
        ep.created_at as ep_created_at, ep.updated_at as ep_updated_at
    </sql>
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from exam_papers ep
        where ep.id = #{id,jdbcType=INTEGER}
    </select>
    
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from exam_papers
        where id = #{id,jdbcType=INTEGER}
    </delete>
    
    <insert id="insert" parameterType="com.ik.service.miniprogram.model.ExamPaper" useGeneratedKeys="true" keyProperty="id" >
        insert into exam_papers (paper_type, name, total_scores, 
          teacher_id, set_person, question_ids, 
          created_at, updated_at)
        values (#{paperType,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{totalScores,jdbcType=INTEGER}, 
          #{teacherId,jdbcType=INTEGER}, #{setPerson,jdbcType=VARCHAR}, #{questionIds,jdbcType=VARCHAR}, 
          #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
    </insert>
    
    <insert id="insertSelective" parameterType="com.ik.service.miniprogram.model.ExamPaper" useGeneratedKeys="true" keyProperty="id" >
        insert into exam_papers
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="paperType != null" >
                paper_type,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="totalScores != null" >
                total_scores,
            </if>
            <if test="teacherId != null" >
                teacher_id,
            </if>
            <if test="setPerson != null" >
                set_person,
            </if>
            <if test="questionIds != null" >
                question_ids,
            </if>
            <if test="createdAt != null" >
                created_at,
            </if>
            <if test="updatedAt != null" >
                updated_at,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="paperType != null" >
                #{paperType,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="totalScores != null" >
                #{totalScores,jdbcType=INTEGER},
            </if>
            <if test="teacherId != null" >
                #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="setPerson != null" >
                #{setPerson,jdbcType=VARCHAR},
            </if>
            <if test="questionIds != null" >
                #{questionIds,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null" >
                #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    
    <update id="updateByPrimaryKeySelective" parameterType="com.ik.service.miniprogram.model.ExamPaper" >
        update exam_papers
        <set >
            <if test="paperType != null" >
                paper_type = #{paperType,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="totalScores != null" >
                total_scores = #{totalScores,jdbcType=INTEGER},
            </if>
            <if test="teacherId != null" >
                teacher_id = #{teacherId,jdbcType=INTEGER},
            </if>
            <if test="setPerson != null" >
                set_person = #{setPerson,jdbcType=VARCHAR},
            </if>
            <if test="questionIds != null" >
                question_ids = #{questionIds,jdbcType=VARCHAR},
            </if>
            <if test="createdAt != null" >
                created_at = #{createdAt,jdbcType=TIMESTAMP},
            </if>
            <if test="updatedAt != null" >
                updated_at = #{updatedAt,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <update id="updateByPrimaryKey" parameterType="com.ik.service.miniprogram.model.ExamPaper" >
        update exam_papers
        set paper_type = #{paperType,jdbcType=INTEGER},
          name = #{name,jdbcType=VARCHAR},
          total_scores = #{totalScores,jdbcType=INTEGER},
          teacher_id = #{teacherId,jdbcType=INTEGER},
          set_person = #{setPerson,jdbcType=VARCHAR},
          question_ids = #{questionIds,jdbcType=VARCHAR},
          created_at = #{createdAt,jdbcType=TIMESTAMP},
          updated_at = #{updatedAt,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <sql id="model_where_clause" >
        <where >
            <if test="model != null" >
                <if test="model.id != null" >
                    and ep.id = #{model.id}
                </if>
                <if test="model.paperType != null" >
                    and ep.paper_type = #{model.paperType}
                </if>
                <if test="model.name != null" >
                    and ep.name = #{model.name}
                </if>
                <if test="model.totalScores != null" >
                    and ep.total_scores = #{model.totalScores}
                </if>
                <if test="model.teacherId != null" >
                    and ep.teacher_id = #{model.teacherId}
                </if>
                <if test="model.setPerson != null" >
                    and ep.set_person = #{model.setPerson}
                </if>
                <if test="model.questionIds != null" >
                    and ep.question_ids = #{model.questionIds}
                </if>
                <if test="model.createdAt != null" >
                    and ep.created_at = #{model.createdAt}
                </if>
                <if test="model.updatedAt != null" >
                    and ep.updated_at = #{model.updatedAt}
                </if>
            </if>
        </where>
    </sql>
    
    <select id="select" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.ExamPaper" >
        select
        <include refid="Base_Column_List" />
        from exam_papers ep
        <include refid="model_where_clause"/>
        <if test="model == null" >
            where 0 = 1
        </if>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectOne" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.ExamPaper" >
        select
        <include refid="Base_Column_List" />
        from exam_papers ep
        <include refid="model_where_clause"/>
        limit 1
    </select>
    
    <select id="selectPageList" resultMap="BaseResultMap" parameterType="com.ik.service.miniprogram.model.ExamPaper" >
        select
        <include refid="Base_Column_List" />
        from exam_papers ep
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <select id="selectCount" parameterType="com.ik.service.miniprogram.model.ExamPaper" resultType="java.lang.Integer" >
        select count(1) from exam_papers ep
        <include refid="model_where_clause"/>
        <if test="model.orderBy != null" >
             order by ${model.orderBy}
        </if>
    </select>
    
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id" >
        insert into exam_papers (
            paper_type, name, total_scores, 
            teacher_id, set_person, question_ids, 
            created_at, updated_at
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
        (
            #{item.paperType}, #{item.name}, #{item.totalScores}, 
            #{item.teacherId}, #{item.setPerson}, #{item.questionIds}, 
            #{item.createdAt}, #{item.updatedAt}
        )
        </foreach>
    </insert>
    
    <delete id="deleteByIds" parameterType="java.util.List" >
        delete from exam_papers
        where id in
        <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>
    
</mapper>